{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid301\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid401\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid503\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid601\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid602\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid603\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid701\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\margl1440\margr1440\vieww17220\viewh13480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Data Structures Notes \
\

\b \ul Class 10/3
\b0 \ulnone \
\
Stack -> pile of data with one on top of another \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Only have access to data on top of the stack \
{\listtext	
\f1 \uc0\u9642 
\f0 	}Data below will be stored, but not accessible until at the top \
{\listtext	
\f1 \uc0\u9642 
\f0 	}Data is available in reverse order to which it was placed in the stack \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}LIFO: Last in, first out \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
Data Structures -> program implementation of ADT \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Abstract Data Type (ADT): abstract specification of data together with the operations that can be performed on data  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Operations for the stack (abstract data type) \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Push() -> puts data on the stack \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}modifies the data (1 of 2 functions that changes the stack)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Pop() -> pops/remove data from the stack (top element) \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}removes top member from the data, usually store in temp variable \
{\listtext	\uc0\u8259 	}use Pop() to remove data and use it in someway \
{\listtext	\uc0\u8259 	}modifies the data (2 of 2 functions that changes the stack)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Top() -> gives a top data element without removing it from the stack \
{\listtext	
\f1 \uc0\u9642 
\f0 	}is_empty() -> returns true if stack is empty (Boolean) \
{\listtext	
\f1 \uc0\u9642 
\f0 	}is_full() -> returns true if stack is full (Boolean) \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Determining Memory/Size \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}v.max_size() -> determines the max size of an vector \
{\listtext	
\f1 \uc0\u9642 
\f0 	}v.size() -> the actual amount of elements in the vector \
{\listtext	
\f1 \uc0\u9642 
\f0 	}v.capacity() -> the amount the computer gives you \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}Example of returned values for functions:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 		vector<int> v(10);\
		v.size(); //will return 10\
		v.capacity() \
\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}vector <int> v(10);\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\'95	}has memory space already allocated \
{\listtext	\'95	}no need to for extra work when compiling \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}vector <int> v;\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls7\ilvl2\cf0 {\listtext	\'95	}must dynamically allocate memory \
{\listtext	\'95	}uses push_back() method \
{\listtext	\'95	}requires more computer work when compiling \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Functions for dynamically allocating memory - expanding the size of a vector \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}push_back()\
{\listtext	
\f1 \uc0\u9642 
\f0 	}reserve()\
{\listtext	
\f1 \uc0\u9642 
\f0 	}resize()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Unsigned int -> places range of 0 - positive #\
0 equal/< random(seed) < 1  \
\
_______________________________________________________________________________________\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 \ul \ulc0 Class 10/13
\b0 \ulnone \
\
// STACK PROGRAM \
\
#include <iostream>\
#include <iomanip>\
#include <stdio.h>\
\
const int MAXSIZE = 8;\
int stack [MAXSIZE];\
int current_size = -1;\
unsigned int seed = 17;\
\
using namespace std; \
\
// Functions \
\
int is_empty()\
\{\
	if (current_size == -1)\
		return 1;\
	else \
		return 0;\
\}\
\
int is_full()\
\{\
	if (current_size == MAXSIZE)\
		return 1;\
	else \
		return 0;\
\}\
\
int top()\
\{\
	return stack [current_size];\
\}\
\
int pop()\
\{\
	if (!is_empty())\
	\{\
		data = stack [current_size];\
		current_size = current_size -1;\
		return data;\
	\}\
	else\
		printf(\'93Could not retrieve data. Stack is empty.\\u\'94);\
\}\
\
int push(int data)\
\{\
	if (!is_full())\
	\{\
		current_size = current_size + 1;\
		stack [current_size] = data;\
	\}\
	else \
		printf(\'93Could not insert data. Stack is full.\\u\'94;\
\}\
\
double random(unsigned int &seed)\
\{\
	const int MODULAS = 15749;\
	const int MULTIPLIER = 69069;\
	const int INCREMENT = 1;\
	seed = ((MULTIPLIER * seed) + INCREMENT) % MODULUS;\
	return double(seed)/double(MODULUS);\
\}\
\
_______________________________________________________________________________________\
\

\b \ul \ulc0 Class 10/20\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
// find_if requires the algorithms header \
void insert_before_odd_numbers (vector<int> &v)\
\{\
	vector<int> :: elevator p = v.begin();\
	while \
	\{\
		p = find_if (p, v.end(), odd)\
		if (p != v.end())\
		\{\
			v.insert(p, -1);\
			p += 2; 	// or use function: 	advance(p, 2);\
		\}\
	\}\
\}\
\
bool odd (int u)\
\{\
	return u%2;\
\}\
\
\
\
// Program to test speed \
// watch.h\
#undef WATCH_H\
#ifundef WATCH_H\
#define WATCH_H\
#include <time.h>\
\
class watch \
\{\
	public: \
		watch();\
		void start();\
		void stop();\
		void delay(int duration)\
		double seconds; 	\
		double minutes;\
		double hours;\
\
	private: \
		clocks_t ticks_passed; \
\};\
\
\
// watch.cpp\
\
#include <iostream> \
#include <cstdlib>\
#include \'93watch.h\'94\
\
using namespace std;\
\
watch :: watch()\
\{\
	ticks_passed = clock();\
\}\
\
void watch :: start()\
\{\
	ticks_passed = clock();\
\}\
\
void watch :: stop()\
\{\
	ticks_passed = clock()_ticks_passed;\
	if (ticks_passed == clock_t(-1))\
	\{\
		cout << \'93Clock overflow\'94 << Lendl;\
		exit(1);\
	\}\
\}\
\
void watch :: delay(int duration)\
\{\
	for(int i=0; i<duration; ++i)\
	\{\};\
\}\
\
double watch :: seconds()\
\{\
	return double(ticks_passed)/CLOCK_PER_SEC;\
\}\
\
double watch :: minutes()\
\{\
	return double(ticks_passed)/CLOCK_PER_SEC/60;\
\}\
\
double watch :: hours()\
\{\
	return double(ticks_passed)/CLOCK_PER_SEC/60/60\
\}\
\
CLOCK_PER_SEC\
#define CLOCK_PER_SEC   10000\
(ANSI c clock ticks per sec)\
It is defined in: /usr/include/madtime/wachttime.h\
\
int main()\
\{\
	watch stop_watch;\
	stop_watch.start();\
	for(int i=0; i<10000, ++i)\
	\{\}\
	stop_watch.stop();\
	cout << stop_watch.seconds() << ends;\
	cout << stop_watch.minutes() << ends;\
	cout << stop_watch.hours() << ends;\
\
	return 0;\
\}\
\
\
// Homework #\
// Goal \'97> write a program that declares and populates 1D Vector of 10,000 elements in at least three different ways and find most efficient. \
// 1. vector<int> aa;\
// 	- for loop\
// 	- push_back \
// 2. vector <int> v;\
//	- use insert method; \
// 3. read from data file \
//	- create stream \
// 4. vector<int> aa (10000, 2);\
\
\
\
\
\
\
}